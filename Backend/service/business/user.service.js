/**
 * User Service - Business logic only (function-based)
 */

const { 
  encryptPassword, 
  verifyPassword, 
  generateSecureToken,
  hashToken,
  verifyToken,
  generateExpiration,
  isExpired,
  generateJwtToken
} = require('../helpers/security.helper');
const { sendMail } = require('../helpers/email.helper');
const dbModels = require('../../dbo');

const { User, ColorSeason, FavoriteColor } = dbModels;

/**
 * Bejelentkez√©s, jelsz√≥ ellen≈ërz√©s √©s JWT gener√°l√°s
 */
async function login(username, password) {
  
  //Megkeresi usert az adatb√°zisban, a sz√≠n√©vszakkal egy√ºtt
  const user = await User.findOne({ 
    where: { login_name: username },
    include: [
      { model: ColorSeason, as: 'colorSeason' },
      { model: FavoriteColor, as: 'favoriteColors' }
    ]
  });
  
  //Ha nincs, akkor hiba
  if (!user) {
    return { success: false, error: 'INVALID_CREDENTIALS' };
  }
  
  //Jelsz√≥ ellen≈ërz√©s, 
  const passwordValid = await verifyPassword(password, user.login_password_hash);
  
  if (!passwordValid) {
    return { success: false, error: 'INVALID_CREDENTIALS' };
  }

  //Sikeres bejelentkez√©s, user adat √©s JWT token gener√°l√°s
  const userData = formatUser(user);
  //A form√°zott user adat alapj√°n JWT token gener√°l√°sa
  const token = generateJwtToken(userData);

  return { 
    success: true, 
    user: userData,
    token: token
  };
}

/**
 * Regisztr√°ci√≥, duplik√°ci√≥ ellen≈ërz√©s, jelsz√≥ titkos√≠t√°s
 */
async function register(userData) {
  //Adatok kicsomagol√°sa
  const { username, password, email, fullName } = userData;

  // Van-e m√°r ilyen user, ezt lentebb defini√°lt f√ºggv√©ny int√©zi
  await checkUserExists(username, email);

  // User l√©trehoz√°sa, el≈ësz√∂r jelsz√≥t titkos√≠tunk
  const hash = await encryptPassword(password);
  //Azt√°n a jelszav√°t titkos√≠tva elmentj√ºk az √∫j userrel egy√ºtt
  const newUser = await User.create({
    login_name: username,
    login_password_hash: hash,
    email_address: email,
    full_name: fullName
  });

  //A sikeres regisztr√°ci√≥ ut√°n visszaadjuk a form√°zott user adatokat
  return { 
    success: true, 
    user: formatUser(newUser)
  };
}

/**
 * Elfelejtett jelsz√≥, token gener√°l√°s √©s email k√ºld√©s
 */
async function forgotPassword(email, emailTemplate) {
  //Megkeresi a usert email alapj√°n
  const user = await User.findOne({ where: { email_address: email } });
  
  // Mindig sikerrel t√©r vissza, hogy ne lehessen kider√≠teni, l√©tezik-e a user, em√∂g√∂tt is biztons√°gi okok √°llnak (user enumeration)
  if (!user) return { success: true };

  // Gener√°l √©s elment egy tokent, ezt hashelve t√°rolja az adatb√°zisban 
  const token = generateSecureToken();
  await user.update({
    password_recovery_hash: await hashToken(token),
    password_recovery_expires: generateExpiration(24)
  });

//Craftolunk egy linket, az encodeURIComponent az√©rt kell, hogy ha speci√°lis karakter van az email c√≠mben, akkor se szakadjon meg a link
  const resetLink = `${process.env.FRONTEND_URL}/reset-password?token=${token}&email=${encodeURIComponent(email)}`;
  //Az email tartalm√°t el≈ëk√©sz√≠tj√ºk
  const emailContent = prepareEmailContent(emailTemplate, resetLink, user.full_name);
  
  //Azt√°n itt m√°r elk√ºldj√ºk az emailt, visszakapjuk az eredm√©nyt
  const result = await sendMail(email, emailTemplate.subject, emailContent.text, emailContent.html);
  
  if (!result.success) {
    return { success: false, error: 'EMAIL_FAILED' };
  }

  return { success: true };
}

/**
 * Jelsz√≥ vissza√°ll√≠t√°s token alapj√°n, a user a tokennel azonos√≠tja mag√°t
 */
async function resetPassword(token, newPassword) {
  //Megkeresi a usert a token alapj√°n
  const user = await findUserByToken(token);
  
  if (!user) return { success: false, error: 'INVALID_TOKEN' };
  // Ellen≈ërizz√ºk, hogy a token nem j√°rt-e le
  if (isExpired(user.password_recovery_expires)) {
    return { success: false, error: 'TOKEN_EXPIRED' };
  }

  // Ha minden ok√©, friss√≠tj√ºk a jelsz√≥t, √©s t√∂r√∂lj√ºk a token adatokat
  await user.update({
    login_password_hash: await encryptPassword(newPassword),
    password_recovery_hash: null,
    password_recovery_expires: null
  });

  return { success: true };
}

/**
 * Jelsz√≥ v√°ltoztat√°s, a user azonos√≠tva van, csak a r√©gi jelsz√≥t kell ellen≈ërizni
 */
async function changePassword(userId, currentPassword, newPassword) {
  //Itt m√°r azonos√≠tott userrel dolgozunk
  const user = await User.findOne({ where: { account_id: userId } });
  
  if (!user) {
    return { success: false, error: 'USER_NOT_FOUND' };
  }

  // Ellen≈ërizz√ºk a jelenlegi jelsz√≥t
  if (!(await verifyPassword(currentPassword, user.login_password_hash))) {

    return { success: false, error: 'INVALID_CURRENT_PASSWORD' };
  }

  // Minden ok√©, friss√≠tj√ºk az √∫j jelsz√≥val
  const newHash = await encryptPassword(newPassword);
  await user.update({
    login_password_hash: newHash
  });

  return { success: true };
}

/**
 * Megn√©zz√ºk, hogy l√©tezik-e m√°r a user n√©v vagy email c√≠m
 */
async function checkUserExists(username, email) {
  //Egy t√∂mbben p√°rhuzamosan lek√©rdezz√ºk az adatb√°zisb√≥l
  const [existingUser, existingEmail] = await Promise.all([
    User.findOne({ where: { login_name: username } }),
    User.findOne({ where: { email_address: email } })
  ]);

  //Ha valamelyik nem √ºres, akkor dobunk egy hib√°t
  if (existingUser) throw new Error('USERNAME_TAKEN');
  if (existingEmail) throw new Error('EMAIL_TAKEN');
}

/**
 * Token alapj√°n megkeress√ºk a usert
 */
async function findUserByToken(token) {
  //Kikeress√ºk az √∂sszes olyan usert, akinek van jelsz√≥ vissza√°ll√≠t√≥ tokenje
  const users = await User.findAll({
    where: { password_recovery_hash: { [require('sequelize').Op.not]: null } }
  });

  //V√©gigmegy√ºnk a usereken, √©s megn√©zz√ºk, hogy a token egyezik-e valamelyik hashelt tokennel
  for (const user of users) {
    if (await verifyToken(token, user.password_recovery_hash)) {
      return user;
    }
  }
  return null;
}

/**
 * Megform√°zza a user objektumot a kliens fel√©
 */
function formatUser(user) {
  console.log('üîç formatUser called - user.colorSeason:', user.colorSeason ? user.colorSeason.season_name : 'NULL');
  
  const formatted = {
    id: user.account_id,
    username: user.login_name,
    email: user.email_address,
    fullName: user.full_name,
    colorSeason: user.colorSeason ? user.colorSeason.season_name : null,
    colorAnalysisDate: user.color_analysis_date,
    favoriteColors: user.favoriteColors ? user.favoriteColors.map(c => c.color_hex) : []
  };
  
  console.log('üîç formatUser result - colorSeason:', formatted.colorSeason);
  
  return formatted;
}

/**
 * El≈ëk√©sz√≠ti az email tartalm√°t a sablon alapj√°n
 */
function prepareEmailContent(template, resetLink, userName = 'Felhaszn√°l√≥') {
  const html = template.html
    .replace(/\{recoveryLink\}/g, resetLink)
    .replace(/\{userFullName\}/g, userName);
  
  const text = template.text ? 
    template.text
      .replace(/\{recoveryLink\}/g, resetLink)
      .replace(/\{userFullName\}/g, userName) : '';

  return { html, text };
}

module.exports = {
  login,
  register,
  forgotPassword,
  resetPassword,
  changePassword,
  formatUser,
  checkUserExists,
  findUserByToken,
  prepareEmailContent
};
